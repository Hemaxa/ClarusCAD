name: Build ClarusCAD

on:
  push:
    branches: [ main, dev4 ]
  pull_request:
    branches: [ main, dev4 ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            qt_version: '6.5.0'
            qt_arch: 'gcc_64'
            artifact_name: 'ClarusCAD_linux_AppImage'
            package_type: 'appimage'

          - os: windows-latest
            qt_version: '6.5.0'
            qt_arch: 'win64_msvc2019_64'
            artifact_name: 'ClarusCAD_windows_installer'
            package_type: 'nsis'

          - os: macos-14
            qt_version: '6.5.0'
            qt_arch: 'clang_64'
            artifact_name: 'ClarusCAD_macOS_package'
            package_type: 'pkg'

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract Version (Cross-platform)
      id: get_version
      shell: bash
      run: |
        if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$RUNNER_OS" == "Windows" ]]; then
          # Windows Git Bash or PowerShell
          VERSION=$(awk '/project\(ClarusCAD VERSION/ {match($0, /VERSION ([0-9.]+)/, arr); print arr[1]}' CMakeLists.txt)
        else
          # Linux/macOS - use sed without -P flag
          VERSION=$(sed -n 's/.*project(ClarusCAD VERSION \([0-9\.]*\)).*/\1/p' CMakeLists.txt)
        fi
        if [ -z "$VERSION" ]; then
          # Fallback method
          VERSION=$(grep "project(ClarusCAD VERSION" CMakeLists.txt | sed 's/.*VERSION \([0-9\.]*\).*/\1/')
        fi
        echo "Extracted version: $VERSION"
        if [ -z "$VERSION" ]; then
          echo "Error: Could not extract version from CMakeLists.txt"
          exit 1
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "APP_VERSION=$VERSION" >> $GITHUB_OUTPUT

    # Linux Dependencies
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev patchelf fakeroot libfuse2 libxcb-cursor0

    # Install Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ matrix.qt_version }}
        arch: ${{ matrix.qt_arch }}
        cache: true

    # Configure CMake
    - name: Configure CMake (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"

    # Build Project
    - name: Build Project
      run: cmake --build build --config Release

    # Linux Packaging
    - name: Package Linux (AppImage)
      if: matrix.package_type == 'appimage'
      run: |
        # Download linuxdeployqt
        wget -qO linuxdeployqt.AppImage https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt.AppImage

        # Create AppDir structure
        cmake --install build --prefix AppDir/usr --config Release

        # Create desktop file if it doesn't exist
        mkdir -p AppDir/usr/share/applications
        if [ ! -f "AppDir/usr/share/applications/ClarusCAD.desktop" ]; then
          cat > AppDir/usr/share/applications/ClarusCAD.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=ClarusCAD
        Exec=ClarusCAD
        Icon=ClarusCAD
        Comment=CAD Application
        Categories=Graphics;Engineering;
        EOF
        fi

        # Create icon directories and copy icon
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        if [ -f "res/app-icon/icon.png" ]; then
          cp res/app-icon/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/ClarusCAD.png
        elif [ -f "AppDir/usr/share/icons/hicolor/256x256/apps/ClarusCAD.png" ]; then
          # Icon already copied by install
          echo "Icon already in place"
        else
          # Create a simple colored icon as fallback
          sudo apt-get install -y imagemagick 2>/dev/null || true
          if command -v convert >/dev/null 2>&1; then
            convert -size 256x256 xc:blue AppDir/usr/share/icons/hicolor/256x256/apps/ClarusCAD.png
          else
            # Create empty file as last resort
            touch AppDir/usr/share/icons/hicolor/256x256/apps/ClarusCAD.png
          fi
        fi

        # Copy desktop file and icon to AppDir root
        cp AppDir/usr/share/applications/ClarusCAD.desktop AppDir/
        cp AppDir/usr/share/icons/hicolor/256x256/apps/ClarusCAD.png AppDir/

        # Build AppImage
        ./linuxdeployqt.AppImage AppDir/usr/bin/ClarusCAD -appimage -extra-plugins=iconengines,imageformats,platformthemes

        # Rename AppImage
        mv ./*.AppImage ClarusCAD_v${{ env.APP_VERSION }}_linux.AppImage || echo "No AppImage found to rename"

    # Windows Packaging
    - name: Package Windows (NSIS)
      if: matrix.package_type == 'nsis'
      shell: pwsh
      run: |
        # Install and Deploy Qt
        cmake --build build --config Release --target INSTALL
        $windeployqt = Get-Command "$env:Qt6_DIR\bin\windeployqt.exe" -ErrorAction SilentlyContinue
        if (-not $windeployqt) {
          Write-Error "windeployqt.exe not found in $env:Qt6_DIR\bin"
          exit 1
        }
        & "$env:Qt6_DIR\bin\windeployqt.exe" --no-compiler-runtime --no-opengl-sw --no-translations "${{ github.workspace }}\install\bin\ClarusCAD.exe"

        # Create NSIS installer using CPack
        Push-Location build
        cpack -G NSIS -C Release
        Pop-Location

        # Move installer to root with proper name
        $installer = Get-ChildItem -Path "build" -Name "*.exe" | Select-Object -First 1
        if ($installer) {
          Move-Item "build\$installer" "ClarusCAD_v${{ env.APP_VERSION }}_windows.exe"
          Write-Host "Created installer: ClarusCAD_v${{ env.APP_VERSION }}_windows.exe"
        } else {
          Write-Host "No installer found in build directory"
          Get-ChildItem -Path "build" -Recurse -Name "*.exe"
        }

    # macOS Packaging
    - name: Package macOS (PKG)
      if: matrix.package_type == 'pkg'
      run: |
        cmake --build build --config Release --target package
        # Find and rename the pkg file
        if [ -f "build/ClarusCAD_v"*"_macOS_ARM.pkg" ]; then
          mv build/ClarusCAD_v*_macOS_ARM.pkg ClarusCAD_v${{ env.APP_VERSION }}_macOS.pkg
        else
          # Alternative search
          find build -name "*.pkg" -exec mv {} ClarusCAD_v${{ env.APP_VERSION }}_macOS.pkg \; 2>/dev/null || echo "No PKG found"
        fi

    # Upload Artifacts
    - name: Upload Artifact (Linux)
      if: matrix.package_type == 'appimage'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ClarusCAD_v*_linux.AppImage

    - name: Upload Artifact (Windows)
      if: matrix.package_type == 'nsis'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ClarusCAD_v*_windows.exe

    - name: Upload Artifact (macOS)
      if: matrix.package_type == 'pkg'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ClarusCAD_v*_macOS.pkg

  # Summary job to collect all artifacts
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev4')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/*/
