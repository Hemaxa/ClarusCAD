name: Build ClarusCAD

on:
  push:
    branches: [ main, dev4 ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, dev4 ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.0'
        install-deps: 'true' # Позволяем экшену самому ставить зависимости Qt

    # --- Специфичные шаги для Linux ---
    - name: Install Linux AppImage Dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get install -y libfuse2 # Устанавливаем только то, что нужно для linuxdeployqt

    - name: Download linuxdeployqt
      if: runner.os == 'Linux'
      run: |
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage

    # --- Специфичные шаги для Windows ---
    - name: Install NSIS via Chocolatey
      if: runner.os == 'Windows'
      run: choco install nsis

    # --- Общие шаги сборки ---
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build Project
      run: cmake --build build --config Release --parallel

    # --- Шаги упаковки для каждой ОС ---

    - name: Package for Linux (AppImage)
      if: runner.os == 'Linux'
      run: |
        mkdir -p build/AppDir # Создаем директорию для установки
        cmake --install build --prefix build/AppDir/usr
        # Запускаем linuxdeployqt из корневой папки, указывая путь к исполняемому файлу
        ./linuxdeployqt-continuous-x86_64.AppImage build/AppDir/usr/bin/ClarusCAD -appimage

    - name: Package for Windows (NSIS)
      if: runner.os == 'Windows'
      run: |
        # Сначала копируем все DLL от Qt
        ${{ env.QT_INSTALL_DIR }}\msvc2019_64\bin\windeployqt.exe --no-compiler-runtime build/Release/ClarusCAD.exe
        # Теперь запускаем CPack, который создаст установщик с этими DLL
        cmake --build build --config Release --target package

    - name: Package for macOS (DMG)
      if: runner.os == 'macOS'
      run: |
        # Используем правильный путь к macdeployqt
        ${{ env.QT_INSTALL_DIR }}/macos/bin/macdeployqt build/ClarusCAD.app -dmg

    # --- Загрузка артефактов ---
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ClarusCAD-${{ matrix.os }}
        path: |
          ClarusCAD*.AppImage
          build/ClarusCAD*.exe
          build/ClarusCAD*.dmg
        if-no-files-found: ignore
